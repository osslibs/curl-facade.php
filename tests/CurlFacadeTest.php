<?php

namespace osslibs\Curl;

use PHPUnit\Framework\TestCase;

class CurlFacadeTest extends TestCase
{
    protected function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        \Mockery::close();
    }

    public function testHeadersAssoc()
    {
        $method = "POST";
        $uri = "URI";
        $headers = [
            'aA: bB',
            'cC: dD',
        ];

        $status = 200;
        $data = "hey there";

        $expect = "response: $data";

        $curl = \Mockery::mock(Curl::class);
        $curl->shouldReceive('setopt')->once()->with(CURLOPT_CUSTOMREQUEST, $method);
        $curl->shouldReceive('setopt')->once()->with(CURLOPT_URL, $uri);
        $curl->shouldReceive('setopt')->once()->with(CURLOPT_HTTPHEADER, $headers);
        $curl->shouldReceive('setopt')->once()->with(CURLOPT_RETURNTRANSFER, 1);
        $curl->shouldReceive('setopt')->once()->withSomeOfArgs(CURLOPT_HEADERFUNCTION);
        $curl->shouldReceive('getinfo')->once()->with(CURLINFO_RESPONSE_CODE)->andReturn($status);
        $curl->shouldReceive('exec')->once()->andReturn($expect);
        $curl->shouldReceive('close')->once();

        $facade = new CurlFacade($curl);
        $facade->method($method);
        $facade->uri($uri);
        $facade->headersStringList($headers);

        $response = $facade->execute();

        $this->assertEquals($expect, $response->data());
    }

//
//    public function testHeadersEntryList()
//    {
//        $headers = [
//            ['aA', 'bB'],
//            ['cC', 'dD'],
//        ];
//
//        $expect = [
//            'aA' => 'bB',
//            'cC' => 'dD',
//        ];
//
//        $curl = new CurlFacade();
//        $curl->method("GET");
//        $curl->uri("http://headers.jsontest.com/");
//        $curl->headersEntryList($headers);
//        $this->assertArraySubset($expect, (array)json_decode($curl->execute()->data()));
//    }
//
//    public function testHeadersStringList()
//    {
//        $headers = [
//            'aA: bB',
//            'cC: dD',
//        ];
//
//        $expect = [
//            'aA' => 'bB',
//            'cC' => 'dD',
//        ];
//
//        $curl = new CurlFacade();
//        $curl->method("GET");
//        $curl->uri("http://headers.jsontest.com/");
//        $curl->headersStringList($headers);
//        $this->assertArraySubset($expect, (array)json_decode($curl->execute()->data()));
//    }
//
//    public function testData()
//    {
//        $text = json_encode((object)['a' => 'A', 'b' => 'B']);
//
//        $curl = new CurlFacade();
//        $curl->method("POST");
//        $curl->uri("http://md5.jsontest.com/");
//        $curl->data('text=' . $text);
//        $this->assertArraySubset(['original' => $text, 'md5' => md5($text)], (array)json_decode($curl->execute()->data()));
//    }
}
